// Package adapters are the glue between components and external sources.
// # This manifest was generated by ymir. DO NOT EDIT.
package adapters

import (
	"database/sql"
	"fmt"

	"entgo.io/ent/dialect"
	sqlEnt "entgo.io/ent/dialect/sql"
	"github.com/rs/zerolog/log"
	_ "modernc.org/sqlite"
)

var HelloSQLiteOpen = sqlEnt.OpenDB // HelloSQLiteOpen will invoke to test case.

// HelloSQLite is data of instances.
type HelloSQLite struct {
	File   string `json:"file"`
	driver *sqlEnt.Driver
}

// Open is open the connection of sqlite.
func (h *HelloSQLite) Open() (*sqlEnt.Driver, error) {
	if h.driver == nil {
		return nil, fmt.Errorf("driver was failed to connected")
	}
	return h.driver, nil
}

// Connect is connected the connection of sqlite.
func (h *HelloSQLite) Connect() (err error) {
	var db *sql.DB
	db, err = sql.Open("sqlite", h.File)
	if err != nil {
		log.Error().Err(err).Msg("sql db is failed to open")
		return err
	}
	h.driver = HelloSQLiteOpen(dialect.SQLite, db)
	pool := h.driver.DB()
	pool.SetMaxOpenConns(1)

	return nil
}

// Disconnect is disconnect the connection of sqlite.
func (h *HelloSQLite) Disconnect() error {
	return h.driver.Close()
}

// WithHelloSQLite option function to assign on adapters.
func WithHelloSQLite(driver Driver[*sqlEnt.Driver]) Option {
	return func(a *Adapter) {
		if err := driver.Connect(); err != nil {
			panic(err)
		}
		open, err := driver.Open()
		if err != nil {
			panic(err)
		}
		a.HelloSQLite = open
	}
}
