// Package adapters are the glue between components and external sources.
// # This manifest was generated by ymir. DO NOT EDIT.
package adapters

import (
	"fmt"

	// postgres go lib.
	_ "github.com/lib/pq"

	"entgo.io/ent/dialect"
	sqlEnt "entgo.io/ent/dialect/sql"
	"github.com/rs/zerolog/log"
)

var HelloPostgresOpen = sqlEnt.Open // HelloPostgresOpen will invoke to test case.

// HelloPostgres is data of instances.
type HelloPostgres struct {
	NetworkDB
	driver *sqlEnt.Driver
}

// Open is open the connection of Postgres.
func (h *HelloPostgres) Open() (*sqlEnt.Driver, error) {
	if h.driver == nil {
		return nil, fmt.Errorf("driver was failed to connected")
	}
	return h.driver, nil
}

// Connect is connected the connection of Postgres.
func (h *HelloPostgres) Connect() (err error) {
	h.driver, err = HelloPostgresOpen(dialect.Postgres, h.dsn())
	if err != nil {
		log.Error().Err(err).Msg("HelloPostgresOpen is failed to open")
		return err
	}

	if h.MaxIdleCons == 0 {
		h.driver.DB().SetMaxIdleConns(0)
	} else {
		h.driver.DB().SetMaxIdleConns(h.MaxIdleCons)
	}
	return nil
}

// Disconnect is disconnect the connection of Postgres.
func (h *HelloPostgres) Disconnect() error {
	return h.driver.Close()
}

func (h *HelloPostgres) dsn() string {
	return fmt.Sprintf("postgres://%s:%s@%s:%d/%s?sslmode=disable", h.User, h.Password, h.Host, h.Port, h.Database)
}

// WithHelloPostgres option function to assign on adapters.
func WithHelloPostgres(driver Driver[*sqlEnt.Driver]) Option {
	return func(a *Adapter) {
		if err := driver.Connect(); err != nil {
			panic(err)
		}
		open, err := driver.Open()
		if err != nil {
			panic(err)
		}
		a.HelloPostgres = open
	}
}

